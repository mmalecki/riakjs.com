section
  h3#guide-meta Meta
  p.
    Meta is an important concept in riak-js. It is a <em>implementation-agnostic</em> 
    object that carries all metadata associated to a document, such as the bucket, key, 
    vclock, links, and so on. It is meant to be <em>recycled</em> &mdash; all properties 
    that make sense to be updated for a subsequent store operation can be modified and sent back.
    Any given properties that aren't used by Riak are assumed to be custom metadata for Riak values.
    This will become more clear as we go through the guide.
  
  p.
    An example <code>meta</code> object could look like:

  +js.
    { bucket: 'riakjs_airlines'
    , key: 'CPA'
    , usermeta: { important: false }
    , _type: 'application/json'
    , binary: false
    , links: 
       [ { tag: 'flight'
         , key: 'CPA-729'
         , bucket: 'riakjs_client_test_flights'
         }
       ]
    , raw: 'riak'
    , clientId: 'riak-js'
    , host: 'localhost'
    , vclock: 'a85hYGBgymDKBVIsTO+1QzKYEhnzWBm+rRc6xgcRZmtOYvg6tx4q8QMkkQUA'
    , lastMod: 'Sat, 25 Sep 2010 17:40:08 GMT'
    , etag: '8I9CsEwo8kScElgvCOC0k'
    , statusCode: 200
    }

  p.
    Riak properties such as <code>contentType', 'vclock', 'clientId', 'links', 'etag', 'r', 'w', 
    'dw', 'returnbody'</code> can all be set on this object. It also contains handy methods to deal 
    with links, and provides <strong>sensible defaults</strong>, which can of course be overriden.
    Examples are <code>contentType: 'application/json'</code> and <code>clientId: 'riak-js'</code>.
  
  p.
    Not only these are tunable per-request. If you need certain defaults to apply to the whole 
    session, provide them at initialization time: 
    <code>getClient({clientId: 'lan-27', raw: 'data', debug: true})</code>.
  
  +js.
    fs.readFile("drunk-pilot.png", 'binary', function (err, image) {
      if (err) throw err;
      db.save('evidence', 'pilot-smith-drunk', image, { contentType: 'jpeg', immediateAction: 'fire' })
    });
  
  em.
    Note that <code>'jpeg'</code> is a shortcut and <code>immediateAction</code> is custom metadata.
  
  p.
    <code>Buffer</code>s are only returned when the <code>responseEncoding</code> property is set 
    to <code> binary</code>. This happens automatically for known binary types, such as 
    <code>image/*</code>, <code>video/*</code> or <code>application/octet-stream</code>, 
    otherwise you have to provide it through <code>Meta</code>.