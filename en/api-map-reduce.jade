section
  h4#api-map-reduce Map/Reduce
  
  p.
    Three variations of the same query:
  
  +js.
    db.add('albums').map('Riak.mapValuesJson').run()
  
  +js.
    db.add('albums').map({name: 'Riak.mapValuesJson', keep: true }).run()
  
  +js.
    db.add('albums').map(function(v) { return [Riak.mapValuesJson(v)0]] }).run()

  p.
    You can chain any number of phases or pass arrays, too:
  
  +js.
    db
      .add('airlines')
      .link({ bucket: 'flights', keep: false })
      .map('Riak.mapValuesJson')
      .reduce(['Riak.filterNotFound', function(value, count) { return value.slice(0, count - 1) }])
      .run(function(err, flights) {
        console.log(flights)
      })

  p.
    If you need to pass-in arguments, both <code>map</code> and <code>reduce</code> 
    accept a second argument that will end up as the third of the map function:
  
  +js.
    db.add('flights').map(function (value, keyData, arg) { /* do something with arg == { cancelled: true } */ }, { cancelled: true })
  
  p.
    You can also use key filters:
  
  +js.
    db.add({ bucket: 'flights', key_filters: [["matches", "KLM"]] }).map('Riak.mapValuesJson').run()
  
  p.
    For input syntax <a href="http://wiki.basho.com/Key-Filters.html#Example-query-solutions">follow the API</a>. 
    <code>add</code> simply takes the value of the <code>inputs</code> property.